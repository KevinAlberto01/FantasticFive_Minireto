// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: rpc-demo-gw.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RPCDemoClient is the client API for RPCDemo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCDemoClient interface {
	GetMultCoords(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MultCoords, error)
	GetImageResult(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ImageResult, error)
}

type rPCDemoClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCDemoClient(cc grpc.ClientConnInterface) RPCDemoClient {
	return &rPCDemoClient{cc}
}

func (c *rPCDemoClient) GetMultCoords(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MultCoords, error) {
	out := new(MultCoords)
	err := c.cc.Invoke(ctx, "/RPCDemoPkg.RPCDemo/GetMultCoords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDemoClient) GetImageResult(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ImageResult, error) {
	out := new(ImageResult)
	err := c.cc.Invoke(ctx, "/RPCDemoPkg.RPCDemo/GetImageResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCDemoServer is the server API for RPCDemo service.
// All implementations must embed UnimplementedRPCDemoServer
// for forward compatibility
type RPCDemoServer interface {
	GetMultCoords(context.Context, *emptypb.Empty) (*MultCoords, error)
	GetImageResult(context.Context, *emptypb.Empty) (*ImageResult, error)
	mustEmbedUnimplementedRPCDemoServer()
}

// UnimplementedRPCDemoServer must be embedded to have forward compatible implementations.
type UnimplementedRPCDemoServer struct {
}

func (UnimplementedRPCDemoServer) GetMultCoords(context.Context, *emptypb.Empty) (*MultCoords, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMultCoords not implemented")
}
func (UnimplementedRPCDemoServer) GetImageResult(context.Context, *emptypb.Empty) (*ImageResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageResult not implemented")
}
func (UnimplementedRPCDemoServer) mustEmbedUnimplementedRPCDemoServer() {}

// UnsafeRPCDemoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCDemoServer will
// result in compilation errors.
type UnsafeRPCDemoServer interface {
	mustEmbedUnimplementedRPCDemoServer()
}

func RegisterRPCDemoServer(s grpc.ServiceRegistrar, srv RPCDemoServer) {
	s.RegisterService(&RPCDemo_ServiceDesc, srv)
}

func _RPCDemo_GetMultCoords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDemoServer).GetMultCoords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RPCDemoPkg.RPCDemo/GetMultCoords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDemoServer).GetMultCoords(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDemo_GetImageResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDemoServer).GetImageResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RPCDemoPkg.RPCDemo/GetImageResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDemoServer).GetImageResult(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCDemo_ServiceDesc is the grpc.ServiceDesc for RPCDemo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCDemo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RPCDemoPkg.RPCDemo",
	HandlerType: (*RPCDemoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMultCoords",
			Handler:    _RPCDemo_GetMultCoords_Handler,
		},
		{
			MethodName: "GetImageResult",
			Handler:    _RPCDemo_GetImageResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc-demo-gw.proto",
}
